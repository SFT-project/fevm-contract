{
  "address": "0x14D02FD1bdf5375A9f472F8Dc569979B0a0d4496",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "userList",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "pidList",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indexList",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardList",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewads",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "DistributeSingleReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "SetDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "userList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pidList",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indexList",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardList",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unclaimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct Reward.LockInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_filToken",
          "type": "address"
        },
        {
          "internalType": "contract ISFTToken",
          "name": "_sftToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sftToken",
      "outputs": [
        {
          "internalType": "contract ISFTToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb23a6dc98ab34c3691da6c35cc90a69ebb4886bae730672fe3b70af7df935304",
  "receipt": {
    "to": null,
    "from": "0x49554923b9361e158Fb267B436f843a4f537D53a",
    "contractAddress": "0x14D02FD1bdf5375A9f472F8Dc569979B0a0d4496",
    "transactionIndex": 3,
    "gasUsed": "1684754",
    "logsBloom": "0x
    "blockHash": "0x5bea3c4c4a419bfd84f9d2dbee41fc1d5cb786d59dab6111106c71fec865d76c",
    "transactionHash": "0xb23a6dc98ab34c3691da6c35cc90a69ebb4886bae730672fe3b70af7df935304",
    "logs": [],
    "blockNumber": 25878614,
    "cumulativeGasUsed": "3597956",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "0722a439cde09db692310cdaa922c7ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pidList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewads\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"DistributeSingleReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"SetDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pidList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward.LockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_filToken\",\"type\":\"address\"},{\"internalType\":\"contract ISFTToken\",\"name\":\"_sftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftToken\",\"outputs\":[{\"internalType\":\"contract ISFTToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Reward.sol\":\"Reward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Reward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/ISFTToken.sol\\\";\\r\\n\\r\\n\\r\\ncontract Reward is Ownable2StepUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    struct LockInfo {\\r\\n        uint amount;\\r\\n        uint stakeAt; // \\u8d28\\u62bc\\u65f6\\u95f4\\r\\n        uint lockPeriod; // \\u9501\\u4ed3\\u671f\\u9650\\r\\n        uint totalRewards; // \\u603b\\u5956\\u52b1\\r\\n        uint unclaimedRewards; // \\u672a\\u9886\\u53d6\\u5956\\u52b1\\r\\n    }\\r\\n\\r\\n    IERC20 public filToken;\\r\\n    ISFTToken public sftToken;\\r\\n    address public distributor;\\r\\n    // pid\\u4e3a0\\uff1a\\u8868\\u793a\\u6d3b\\u671f\\uff0cpid\\u4e3a1\\u8868\\u793a\\u4e09\\u4e2a\\u6708\\u5b9a\\u671f\\r\\n    mapping (uint => uint) public pools; // poolId => lockPeriod\\r\\n    mapping (address => mapping (uint => LockInfo[])) public userInfo; // address => poolId => LockInfo\\r\\n\\r\\n    event Stake(address indexed user, uint indexed pid, uint index, uint amount);\\r\\n    event Unstake(address indexed user, uint indexed pid, uint index, uint amount);\\r\\n    event Claim(address indexed user, uint indexed pid, uint index, uint amount);\\r\\n    event DistributeSingleReward(address distributor, address user, uint pid, uint index, uint reward);\\r\\n    event DistributeReward(address distributor, address[] userList, uint[] pidList, uint[] indexList, uint[] rewardList, uint totalRewads);\\r\\n    event TokensRescued(address indexed to, address indexed token, uint256 amount);\\r\\n    event SetDistributor(address oldDistributor, address newDistributor);\\r\\n    event SetPool(uint pid, uint lockPeriod);\\r\\n\\r\\n    function initialize(IERC20 _filToken, ISFTToken _sftToken, address _distributor) external initializer {\\r\\n        require(address(_filToken) != address(0), \\\"fil token address cannot be zero\\\");\\r\\n        require(address(_sftToken) != address(0), \\\"SFT token address cannot be zero\\\");\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n        filToken = _filToken;\\r\\n        sftToken = _sftToken;\\r\\n        _setPool(1, 7776000); //\\u4e09\\u4e2a\\u6708\\u5b9a\\u671f, \\u6d3b\\u671f\\u4f7f\\u7528\\u9ed8\\u8ba4\\u503c:pools[0] = 0\\r\\n        _setDistributor(_distributor);\\r\\n    }\\r\\n\\r\\n    function setDistributor(address newDistributor) external onlyOwner {\\r\\n        _setDistributor(newDistributor);\\r\\n    }\\r\\n\\r\\n    function _setDistributor(address _distributor) private {\\r\\n        emit SetDistributor(distributor, _distributor);\\r\\n        distributor = _distributor;\\r\\n    }\\r\\n\\r\\n    function setPool(uint pid, uint lockPeriod) external onlyOwner {\\r\\n        _setPool(pid, lockPeriod);\\r\\n    }\\r\\n\\r\\n    function _setPool(uint pid, uint lockPeriod) private {\\r\\n        require(pid != 0 && pools[pid] == 0, \\\"pool already exists\\\");\\r\\n        pools[pid] = lockPeriod;\\r\\n        emit SetPool(pid, lockPeriod);\\r\\n    }\\r\\n\\r\\n    function getUserInfo(address user, uint pid) external view returns(LockInfo[] memory) {\\r\\n        return userInfo[user][pid];\\r\\n    }\\r\\n\\r\\n    // \\u8d28\\u62bc\\r\\n    function stake(uint pid, uint amount) external {\\r\\n        require(pid == 0 || pools[pid] > 0, \\\"pool not exsits\\\");\\r\\n        require(sftToken.balanceOf(address(msg.sender)) >= amount, \\\"stake: sft token banlance not enough\\\");\\r\\n        require(sftToken.transferFrom(address(msg.sender),address(this), amount), \\\"stake: transfer failed\\\");\\r\\n        LockInfo[] storage lockList = userInfo[address(msg.sender)][pid];\\r\\n        // \\u6d3b\\u671f\\u5355\\u72ec\\u5904\\u7406\\r\\n        if (pid == 0) {\\r\\n            // \\u7b2c\\u4e00\\u6b21\\u8d28\\u62bc\\r\\n            if (lockList.length == 0) {\\r\\n                lockList.push(\\r\\n                    LockInfo({\\r\\n                        amount: amount,\\r\\n                        stakeAt: block.timestamp,\\r\\n                        lockPeriod: 0,\\r\\n                        totalRewards: 0,\\r\\n                        unclaimedRewards: 0\\r\\n                    })\\r\\n                );\\r\\n            } else {\\r\\n                LockInfo storage lockInfo = lockList[0];\\r\\n                lockInfo.amount += amount;\\r\\n                // \\u6d3b\\u671f\\u7684stakeAt\\u8868\\u793a\\u6700\\u8fd1\\u7684\\u4e00\\u6b21\\u8d28\\u62bc\\u65f6\\u95f4\\r\\n                lockInfo.stakeAt = block.timestamp;\\r\\n            }\\r\\n        // \\u975e\\u6d3b\\u671f\\uff0c\\u76f4\\u63a5\\u6dfb\\u52a0\\u4e00\\u6b21\\u8d28\\u62bc\\u8bb0\\u5f55\\r\\n        } else {\\r\\n            lockList.push(\\r\\n                LockInfo({\\r\\n                    amount: amount,\\r\\n                    stakeAt: block.timestamp,\\r\\n                    lockPeriod: pools[pid],\\r\\n                    totalRewards: 0,\\r\\n                    unclaimedRewards: 0\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n        emit Stake(address(msg.sender), pid, lockList.length - 1, amount);\\r\\n    }\\r\\n\\r\\n    // \\u89e3\\u8d28\\u62bc\\uff0cpid:\\u54ea\\u4e2a\\u6c60\\u5b50\\uff0cindex:\\u7b2c\\u51e0\\u6b21\\u8d28\\u62bc\\uff0camount:\\u6570\\u91cf\\uff1b\\u6ce8\\u610f\\uff1aindex\\u4ece0\\u5f00\\u59cb\\u3002\\r\\n    function unstake(uint pid, uint index, uint amount) external {\\r\\n        LockInfo storage lockInfo = userInfo[address(msg.sender)][pid][index];\\r\\n        require(block.timestamp > lockInfo.stakeAt + lockInfo.lockPeriod, \\\"it is not time to unlock\\\");\\r\\n        require(lockInfo.amount >= amount, \\\"unstake: balance not enough\\\");\\r\\n        lockInfo.amount -= amount;\\r\\n        require(sftToken.transfer(address(msg.sender), amount), \\\"unstake: transfer fialed\\\");\\r\\n        emit Unstake(address(msg.sender), pid, index, amount);\\r\\n    }\\r\\n\\r\\n    // \\u5206\\u53d1\\u5956\\u52b1,\\u7ed9\\u7528\\u6237userList[i]\\u5728\\u6c60\\u5b50pidList[i]\\u4e2d\\u7684\\u7b2cindexList[i]\\u6b21\\u8d28\\u62bc\\u53d1\\u653erewardList[i]\\u4e2aFIL\\u7684\\u5956\\u52b1\\uff0c\\u5e76\\u5c06totalReward\\u4e2aFIL\\u8f6c\\u5230\\u5f53\\u524d\\u5408\\u7ea6\\u4e2d\\r\\n    function distributeReward(address[] calldata userList, uint[] calldata pidList, uint[] calldata indexList, uint[] calldata rewardList, uint totalRewards) external {\\r\\n        require(address(msg.sender) == distributor, \\\"only distributor can call\\\");\\r\\n        require(userList.length == pidList.length && userList.length == indexList.length && userList.length == rewardList.length, \\\"incorrent params\\\");\\r\\n        require(filToken.balanceOf(msg.sender) >= totalRewards, \\\"fil token balance not enough\\\");\\r\\n        for (uint i = 0; i < userList.length; i++) {\\r\\n            LockInfo storage lockInfo = userInfo[userList[i]][pidList[i]][indexList[i]];\\r\\n            lockInfo.totalRewards += rewardList[i];\\r\\n            lockInfo.unclaimedRewards += rewardList[i];\\r\\n            emit DistributeSingleReward(address(msg.sender), userList[i], pidList[i], indexList[i], rewardList[i]);\\r\\n        }\\r\\n        filToken.safeTransferFrom(address(msg.sender), address(this), totalRewards);\\r\\n        emit DistributeReward(address(msg.sender), userList, pidList, indexList, rewardList, totalRewards);\\r\\n    }\\r\\n\\r\\n    // \\u9886\\u53d6\\u6536\\u76ca\\uff0c\\u7528\\u6237\\u9886\\u53d6\\u5728pid\\u53f7\\u6c60\\u5b50\\u4e2d\\u7b2cindex\\u8d28\\u62bc\\u7684\\u5956\\u52b1\\r\\n    function claim(uint pid, uint index, uint amount) external {\\r\\n        LockInfo storage lockInfo = userInfo[address(msg.sender)][pid][index];\\r\\n        require(lockInfo.unclaimedRewards >= amount, \\\"unclaimed rewards not enough\\\");\\r\\n        lockInfo.unclaimedRewards -= amount;\\r\\n        filToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit Claim(address(msg.sender), pid, index, amount);\\r\\n    }\\r\\n\\r\\n    // \\u63d0\\u53d6\\u8bef\\u8f6c\\u5165\\u7684\\u4ee3\\u5e01\\r\\n    function rescueTokens(\\r\\n        address _to,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        require(_to != address(0), \\\"Cannot send to address(0)\\\");\\r\\n        require(_amount != 0, \\\"Cannot rescue 0 tokens\\\");\\r\\n        IERC20 token = IERC20(_token);\\r\\n        token.safeTransfer(_to, _amount);\\r\\n        emit TokensRescued(_to, _token, _amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0baa83acfabef90cc4abfe7707dc97d38de2eb2e23d062dbc3929b9eef9945c2\",\"license\":\"MIT\"},\"contracts/interface/ISFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface ISFTToken is IERC20 {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x797e88771e1d7bbb1ca07104e5f8829382d64cf8a7a7c2b0f7b68f6e494a6825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d84806100206000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80638e18d648116100ad578063cea9d26f11610071578063cea9d26f14610282578063d5fc44bf14610295578063e30c3978146102a8578063efa9a9be146102b9578063f2fde38b146102cc57600080fd5b80638e18d64814610208578063ac4afa381461021b578063bd97b37514610249578063bfe109281461025c578063c0c53b8b1461026f57600080fd5b806375619ab5116100f457806375619ab51461019557806376e8424f146101a857806379ba5097146101c85780637b0472f0146101d05780638da5cb5b146101e357600080fd5b80627960a41461012557806327af251e1461016557806346430af11461017a578063715018a61461018d575b600080fd5b6101386101333660046117fb565b6102df565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61017861017336600461187c565b610339565b005b610178610188366004611948565b610726565b61017861073c565b6101786101a336600461196a565b610750565b6101bb6101b636600461198e565b610764565b60405161015c91906119ba565b610178610814565b6101786101de366004611948565b61088b565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161015c565b6097546101f0906001600160a01b031681565b61023b610229366004611a28565b609a6020526000908152604090205481565b60405190815260200161015c565b610178610257366004611a41565b610c22565b6099546101f0906001600160a01b031681565b61017861027d366004611a6d565b610e3e565b610178610290366004611ab8565b61104d565b6098546101f0906001600160a01b031681565b6065546001600160a01b03166101f0565b6101786102c7366004611a41565b61114b565b6101786102da36600461196a565b611245565b609b602052826000526040600020602052816000526040600020818154811061030757600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929650909450925085565b6099546001600160a01b031633146103985760405162461bcd60e51b815260206004820152601960248201527f6f6e6c79206469737472696275746f722063616e2063616c6c0000000000000060448201526064015b60405180910390fd5b87861480156103a657508784145b80156103b157508782145b6103f05760405162461bcd60e51b815260206004820152601060248201526f696e636f7272656e7420706172616d7360801b604482015260640161038f565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611af9565b10156104b95760405162461bcd60e51b815260206004820152601c60248201527f66696c20746f6b656e2062616c616e6365206e6f7420656e6f75676800000000604482015260640161038f565b60005b888110156106b9576000609b60008c8c858181106104dc576104dc611b12565b90506020020160208101906104f1919061196a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8581811061052557610525611b12565b90506020020135815260200190815260200160002087878481811061054c5761054c611b12565b905060200201358154811061056357610563611b12565b9060005260206000209060050201905084848381811061058557610585611b12565b9050602002013581600301600082825461059f9190611b3e565b9091555085905084838181106105b7576105b7611b12565b905060200201358160040160008282546105d19190611b3e565b909155507f81fd688f50fe2c01e0c8d6a8d44ae63b58d39e24a2edff03e2903416f91c47629050338c8c8581811061060b5761060b611b12565b9050602002016020810190610620919061196a565b8b8b8681811061063257610632611b12565b905060200201358a8a8781811061064b5761064b611b12565b9050602002013589898881811061066457610664611b12565b604080516001600160a01b039889168152979096166020888101919091529587019490945250606085019190915291020135608082015260a00160405180910390a150806106b181611b56565b9150506104bc565b506097546106d2906001600160a01b03163330846112b6565b7f1340cffb2f43e28f5ee027198f01ccd57479f881c921c44340aaed345d274ede338a8a8a8a8a8a8a8a8a6040516107139a99989796959493929190611ba7565b60405180910390a1505050505050505050565b61072e611321565b610738828261137b565b5050565b610744611321565b61074e6000611427565b565b610758611321565b61076181611440565b50565b6001600160a01b0382166000908152609b602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b8282101561080857838290600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050815260200190600101906107a4565b50505050905092915050565b60655433906001600160a01b031681146108825760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161038f565b61076181611427565b8115806108a557506000828152609a602052604090205415155b6108e35760405162461bcd60e51b815260206004820152600f60248201526e706f6f6c206e6f742065787369747360881b604482015260640161038f565b6098546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190611af9565b10156109b85760405162461bcd60e51b8152602060048201526024808201527f7374616b653a2073667420746f6b656e2062616e6c616e6365206e6f7420656e6044820152630deeaced60e31b606482015260840161038f565b6098546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611c4f565b610a875760405162461bcd60e51b81526020600482015260166024820152751cdd185ad94e881d1c985b9cd9995c8819985a5b195960521b604482015260640161038f565b336000908152609b60209081526040808320858452909152902082610b60578054610b16576040805160a08101825283815242602080830191825260009383018481526060840185815260808501868152875460018181018a55898952949097209551600590970290950195865592519185019190915551600284015551600383015551600490910155610bd2565b600081600081548110610b2b57610b2b611b12565b9060005260206000209060050201905082816000016000828254610b4f9190611b3e565b909155505042600190910155610bd2565b6040805160a0810182528381524260208083019182526000878152609a8252848120549484019485526060840181815260808501828152875460018181018a55898552949093209551600590930290950191825592519181019190915592516002840155516003830155516004909101555b8054839033907ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c44690610c0690600190611c71565b60408051918252602082018790520160405180910390a3505050565b336000908152609b602090815260408083208684529091528120805484908110610c4e57610c4e611b12565b9060005260206000209060050201905080600201548160010154610c729190611b3e565b4211610cc05760405162461bcd60e51b815260206004820152601860248201527f6974206973206e6f742074696d6520746f20756e6c6f636b0000000000000000604482015260640161038f565b8054821115610d115760405162461bcd60e51b815260206004820152601b60248201527f756e7374616b653a2062616c616e6365206e6f7420656e6f7567680000000000604482015260640161038f565b81816000016000828254610d259190611c71565b909155505060985460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190611c4f565b610dfa5760405162461bcd60e51b815260206004820152601860248201527f756e7374616b653a207472616e73666572206669616c65640000000000000000604482015260640161038f565b6040805184815260208101849052859133917ffbd65cfd6de1493db337385c0712095397ecbd0504df64b861cdfceb80c7b42291015b60405180910390a350505050565b600054610100900460ff1615808015610e5e5750600054600160ff909116105b80610e785750303b158015610e78575060005460ff166001145b610edb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038f565b6000805460ff191660011790558015610efe576000805461ff0019166101001790555b6001600160a01b038416610f545760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161038f565b6001600160a01b038316610faa5760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161038f565b610fb26114a9565b610fba6114d0565b609780546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055610ff860016276a70061137b565b61100182611440565b8015611047576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b611055611321565b6001600160a01b0383166110ab5760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073656e6420746f206164647265737328302900000000000000604482015260640161038f565b806110f15760405162461bcd60e51b815260206004820152601660248201527543616e6e6f7420726573637565203020746f6b656e7360501b604482015260640161038f565b816111066001600160a01b0382168584611500565b826001600160a01b0316846001600160a01b03167f77023e19c7343ad491fd706c36335ca0e738340a91f29b1fd81e2673d44896c484604051610e3091815260200190565b336000908152609b60209081526040808320868452909152812080548490811061117757611177611b12565b9060005260206000209060050201905081816004015410156111db5760405162461bcd60e51b815260206004820152601c60248201527f756e636c61696d65642072657761726473206e6f7420656e6f75676800000000604482015260640161038f565b818160040160008282546111ef9190611c71565b909155505060975461120b906001600160a01b03163384611500565b6040805184815260208101849052859133917f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef19101610e30565b61124d611321565b606580546001600160a01b0383166001600160a01b0319909116811790915561127e6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040516001600160a01b03808516602483015283166044820152606481018290526110479085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611535565b6033546001600160a01b0316331461074e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038f565b811580159061139657506000828152609a6020526040902054155b6113d85760405162461bcd60e51b8152602060048201526013602482015272706f6f6c20616c72656164792065786973747360681b604482015260640161038f565b6000828152609a602090815260409182902083905581518481529081018390527fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f8910160405180910390a15050565b606580546001600160a01b031916905561076181611607565b609954604080516001600160a01b03928316815291831660208301527f128323376dda10f736641415ad0e5e8a534e184b01a83f1d15af57c4627480d8910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1661074e5760405162461bcd60e51b815260040161038f90611c88565b600054610100900460ff166114f75760405162461bcd60e51b815260040161038f90611c88565b61074e33611427565b6040516001600160a01b03831660248201526044810182905261153090849063a9059cbb60e01b906064016112ea565b505050565b600061158a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116599092919063ffffffff16565b80519091501561153057808060200190518101906115a89190611c4f565b6115305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161038f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606116688484600085611670565b949350505050565b6060824710156116d15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161038f565b600080866001600160a01b031685876040516116ed9190611cff565b60006040518083038185875af1925050503d806000811461172a576040519150601f19603f3d011682016040523d82523d6000602084013e61172f565b606091505b50915091506117408783838761174b565b979650505050505050565b606083156117b75782516117b0576001600160a01b0385163b6117b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038f565b5081611668565b61166883838151156117cc5781518083602001fd5b8060405162461bcd60e51b815260040161038f9190611d1b565b6001600160a01b038116811461076157600080fd5b60008060006060848603121561181057600080fd5b833561181b816117e6565b95602085013595506040909401359392505050565b60008083601f84011261184257600080fd5b50813567ffffffffffffffff81111561185a57600080fd5b6020830191508360208260051b850101111561187557600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561189a57600080fd5b893567ffffffffffffffff808211156118b257600080fd5b6118be8d838e01611830565b909b50995060208c01359150808211156118d757600080fd5b6118e38d838e01611830565b909950975060408c01359150808211156118fc57600080fd5b6119088d838e01611830565b909750955060608c013591508082111561192157600080fd5b5061192e8c828d01611830565b9a9d999c50979a9699959894979660800135949350505050565b6000806040838503121561195b57600080fd5b50508035926020909101359150565b60006020828403121561197c57600080fd5b8135611987816117e6565b9392505050565b600080604083850312156119a157600080fd5b82356119ac816117e6565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015611a1b5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016119d7565b5091979650505050505050565b600060208284031215611a3a57600080fd5b5035919050565b600080600060608486031215611a5657600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215611a8257600080fd5b8335611a8d816117e6565b92506020840135611a9d816117e6565b91506040840135611aad816117e6565b809150509250925092565b600080600060608486031215611acd57600080fd5b8335611ad8816117e6565b92506020840135611ae8816117e6565b929592945050506040919091013590565b600060208284031215611b0b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611b5157611b51611b28565b500190565b6000600019821415611b6a57611b6a611b28565b5060010190565b81835260006001600160fb1b03831115611b8a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b038b8116825260c060208084018290529083018b90526000918c9160e08501845b8e811015611bf6578435611be2816117e6565b841682529382019390820190600101611bcf565b508581036040870152611c0a818d8f611b71565b93505050508281036060840152611c2281888a611b71565b90508281036080840152611c37818688611b71565b9150508260a08301529b9a5050505050505050505050565b600060208284031215611c6157600080fd5b8151801515811461198757600080fd5b600082821015611c8357611c83611b28565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611cee578181015183820152602001611cd6565b838111156110475750506000910152565b60008251611d11818460208701611cd3565b9190910192915050565b6020815260008251806020840152611d3a816040850160208701611cd3565b601f01601f1916919091016040019291505056fea2646970667358221220c3ed832587dfc5c31815e23cab7f1a5cea4b0c66f7668f25efd35fbd7e47c40564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101205760003560e01c80638e18d648116100ad578063cea9d26f11610071578063cea9d26f14610282578063d5fc44bf14610295578063e30c3978146102a8578063efa9a9be146102b9578063f2fde38b146102cc57600080fd5b80638e18d64814610208578063ac4afa381461021b578063bd97b37514610249578063bfe109281461025c578063c0c53b8b1461026f57600080fd5b806375619ab5116100f457806375619ab51461019557806376e8424f146101a857806379ba5097146101c85780637b0472f0146101d05780638da5cb5b146101e357600080fd5b80627960a41461012557806327af251e1461016557806346430af11461017a578063715018a61461018d575b600080fd5b6101386101333660046117fb565b6102df565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b61017861017336600461187c565b610339565b005b610178610188366004611948565b610726565b61017861073c565b6101786101a336600461196a565b610750565b6101bb6101b636600461198e565b610764565b60405161015c91906119ba565b610178610814565b6101786101de366004611948565b61088b565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161015c565b6097546101f0906001600160a01b031681565b61023b610229366004611a28565b609a6020526000908152604090205481565b60405190815260200161015c565b610178610257366004611a41565b610c22565b6099546101f0906001600160a01b031681565b61017861027d366004611a6d565b610e3e565b610178610290366004611ab8565b61104d565b6098546101f0906001600160a01b031681565b6065546001600160a01b03166101f0565b6101786102c7366004611a41565b61114b565b6101786102da36600461196a565b611245565b609b602052826000526040600020602052816000526040600020818154811061030757600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929650909450925085565b6099546001600160a01b031633146103985760405162461bcd60e51b815260206004820152601960248201527f6f6e6c79206469737472696275746f722063616e2063616c6c0000000000000060448201526064015b60405180910390fd5b87861480156103a657508784145b80156103b157508782145b6103f05760405162461bcd60e51b815260206004820152601060248201526f696e636f7272656e7420706172616d7360801b604482015260640161038f565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611af9565b10156104b95760405162461bcd60e51b815260206004820152601c60248201527f66696c20746f6b656e2062616c616e6365206e6f7420656e6f75676800000000604482015260640161038f565b60005b888110156106b9576000609b60008c8c858181106104dc576104dc611b12565b90506020020160208101906104f1919061196a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a8581811061052557610525611b12565b90506020020135815260200190815260200160002087878481811061054c5761054c611b12565b905060200201358154811061056357610563611b12565b9060005260206000209060050201905084848381811061058557610585611b12565b9050602002013581600301600082825461059f9190611b3e565b9091555085905084838181106105b7576105b7611b12565b905060200201358160040160008282546105d19190611b3e565b909155507f81fd688f50fe2c01e0c8d6a8d44ae63b58d39e24a2edff03e2903416f91c47629050338c8c8581811061060b5761060b611b12565b9050602002016020810190610620919061196a565b8b8b8681811061063257610632611b12565b905060200201358a8a8781811061064b5761064b611b12565b9050602002013589898881811061066457610664611b12565b604080516001600160a01b039889168152979096166020888101919091529587019490945250606085019190915291020135608082015260a00160405180910390a150806106b181611b56565b9150506104bc565b506097546106d2906001600160a01b03163330846112b6565b7f1340cffb2f43e28f5ee027198f01ccd57479f881c921c44340aaed345d274ede338a8a8a8a8a8a8a8a8a6040516107139a99989796959493929190611ba7565b60405180910390a1505050505050505050565b61072e611321565b610738828261137b565b5050565b610744611321565b61074e6000611427565b565b610758611321565b61076181611440565b50565b6001600160a01b0382166000908152609b602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b8282101561080857838290600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050815260200190600101906107a4565b50505050905092915050565b60655433906001600160a01b031681146108825760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161038f565b61076181611427565b8115806108a557506000828152609a602052604090205415155b6108e35760405162461bcd60e51b815260206004820152600f60248201526e706f6f6c206e6f742065787369747360881b604482015260640161038f565b6098546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190611af9565b10156109b85760405162461bcd60e51b8152602060048201526024808201527f7374616b653a2073667420746f6b656e2062616e6c616e6365206e6f7420656e6044820152630deeaced60e31b606482015260840161038f565b6098546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611c4f565b610a875760405162461bcd60e51b81526020600482015260166024820152751cdd185ad94e881d1c985b9cd9995c8819985a5b195960521b604482015260640161038f565b336000908152609b60209081526040808320858452909152902082610b60578054610b16576040805160a08101825283815242602080830191825260009383018481526060840185815260808501868152875460018181018a55898952949097209551600590970290950195865592519185019190915551600284015551600383015551600490910155610bd2565b600081600081548110610b2b57610b2b611b12565b9060005260206000209060050201905082816000016000828254610b4f9190611b3e565b909155505042600190910155610bd2565b6040805160a0810182528381524260208083019182526000878152609a8252848120549484019485526060840181815260808501828152875460018181018a55898552949093209551600590930290950191825592519181019190915592516002840155516003830155516004909101555b8054839033907ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c44690610c0690600190611c71565b60408051918252602082018790520160405180910390a3505050565b336000908152609b602090815260408083208684529091528120805484908110610c4e57610c4e611b12565b9060005260206000209060050201905080600201548160010154610c729190611b3e565b4211610cc05760405162461bcd60e51b815260206004820152601860248201527f6974206973206e6f742074696d6520746f20756e6c6f636b0000000000000000604482015260640161038f565b8054821115610d115760405162461bcd60e51b815260206004820152601b60248201527f756e7374616b653a2062616c616e6365206e6f7420656e6f7567680000000000604482015260640161038f565b81816000016000828254610d259190611c71565b909155505060985460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190611c4f565b610dfa5760405162461bcd60e51b815260206004820152601860248201527f756e7374616b653a207472616e73666572206669616c65640000000000000000604482015260640161038f565b6040805184815260208101849052859133917ffbd65cfd6de1493db337385c0712095397ecbd0504df64b861cdfceb80c7b42291015b60405180910390a350505050565b600054610100900460ff1615808015610e5e5750600054600160ff909116105b80610e785750303b158015610e78575060005460ff166001145b610edb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038f565b6000805460ff191660011790558015610efe576000805461ff0019166101001790555b6001600160a01b038416610f545760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161038f565b6001600160a01b038316610faa5760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161038f565b610fb26114a9565b610fba6114d0565b609780546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055610ff860016276a70061137b565b61100182611440565b8015611047576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b611055611321565b6001600160a01b0383166110ab5760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073656e6420746f206164647265737328302900000000000000604482015260640161038f565b806110f15760405162461bcd60e51b815260206004820152601660248201527543616e6e6f7420726573637565203020746f6b656e7360501b604482015260640161038f565b816111066001600160a01b0382168584611500565b826001600160a01b0316846001600160a01b03167f77023e19c7343ad491fd706c36335ca0e738340a91f29b1fd81e2673d44896c484604051610e3091815260200190565b336000908152609b60209081526040808320868452909152812080548490811061117757611177611b12565b9060005260206000209060050201905081816004015410156111db5760405162461bcd60e51b815260206004820152601c60248201527f756e636c61696d65642072657761726473206e6f7420656e6f75676800000000604482015260640161038f565b818160040160008282546111ef9190611c71565b909155505060975461120b906001600160a01b03163384611500565b6040805184815260208101849052859133917f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef19101610e30565b61124d611321565b606580546001600160a01b0383166001600160a01b0319909116811790915561127e6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040516001600160a01b03808516602483015283166044820152606481018290526110479085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611535565b6033546001600160a01b0316331461074e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038f565b811580159061139657506000828152609a6020526040902054155b6113d85760405162461bcd60e51b8152602060048201526013602482015272706f6f6c20616c72656164792065786973747360681b604482015260640161038f565b6000828152609a602090815260409182902083905581518481529081018390527fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f8910160405180910390a15050565b606580546001600160a01b031916905561076181611607565b609954604080516001600160a01b03928316815291831660208301527f128323376dda10f736641415ad0e5e8a534e184b01a83f1d15af57c4627480d8910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1661074e5760405162461bcd60e51b815260040161038f90611c88565b600054610100900460ff166114f75760405162461bcd60e51b815260040161038f90611c88565b61074e33611427565b6040516001600160a01b03831660248201526044810182905261153090849063a9059cbb60e01b906064016112ea565b505050565b600061158a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116599092919063ffffffff16565b80519091501561153057808060200190518101906115a89190611c4f565b6115305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161038f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606116688484600085611670565b949350505050565b6060824710156116d15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161038f565b600080866001600160a01b031685876040516116ed9190611cff565b60006040518083038185875af1925050503d806000811461172a576040519150601f19603f3d011682016040523d82523d6000602084013e61172f565b606091505b50915091506117408783838761174b565b979650505050505050565b606083156117b75782516117b0576001600160a01b0385163b6117b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038f565b5081611668565b61166883838151156117cc5781518083602001fd5b8060405162461bcd60e51b815260040161038f9190611d1b565b6001600160a01b038116811461076157600080fd5b60008060006060848603121561181057600080fd5b833561181b816117e6565b95602085013595506040909401359392505050565b60008083601f84011261184257600080fd5b50813567ffffffffffffffff81111561185a57600080fd5b6020830191508360208260051b850101111561187557600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561189a57600080fd5b893567ffffffffffffffff808211156118b257600080fd5b6118be8d838e01611830565b909b50995060208c01359150808211156118d757600080fd5b6118e38d838e01611830565b909950975060408c01359150808211156118fc57600080fd5b6119088d838e01611830565b909750955060608c013591508082111561192157600080fd5b5061192e8c828d01611830565b9a9d999c50979a9699959894979660800135949350505050565b6000806040838503121561195b57600080fd5b50508035926020909101359150565b60006020828403121561197c57600080fd5b8135611987816117e6565b9392505050565b600080604083850312156119a157600080fd5b82356119ac816117e6565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015611a1b5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016119d7565b5091979650505050505050565b600060208284031215611a3a57600080fd5b5035919050565b600080600060608486031215611a5657600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215611a8257600080fd5b8335611a8d816117e6565b92506020840135611a9d816117e6565b91506040840135611aad816117e6565b809150509250925092565b600080600060608486031215611acd57600080fd5b8335611ad8816117e6565b92506020840135611ae8816117e6565b929592945050506040919091013590565b600060208284031215611b0b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611b5157611b51611b28565b500190565b6000600019821415611b6a57611b6a611b28565b5060010190565b81835260006001600160fb1b03831115611b8a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b038b8116825260c060208084018290529083018b90526000918c9160e08501845b8e811015611bf6578435611be2816117e6565b841682529382019390820190600101611bcf565b508581036040870152611c0a818d8f611b71565b93505050508281036060840152611c2281888a611b71565b90508281036080840152611c37818688611b71565b9150508260a08301529b9a5050505050505050505050565b600060208284031215611c6157600080fd5b8151801515811461198757600080fd5b600082821015611c8357611c83611b28565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611cee578181015183820152602001611cd6565b838111156110475750506000910152565b60008251611d11818460208701611cd3565b9190910192915050565b6020815260008251806020840152611d3a816040850160208701611cd3565b601f01601f1916919091016040019291505056fea2646970667358221220c3ed832587dfc5c31815e23cab7f1a5cea4b0c66f7668f25efd35fbd7e47c40564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/Reward.sol:Reward",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/Reward.sol:Reward",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 731,
        "contract": "contracts/Reward.sol:Reward",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/Reward.sol:Reward",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/Reward.sol:Reward",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/Reward.sol:Reward",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/Reward.sol:Reward",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1482,
        "contract": "contracts/Reward.sol:Reward",
        "label": "filToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)810"
      },
      {
        "astId": 1485,
        "contract": "contracts/Reward.sol:Reward",
        "label": "sftToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ISFTToken)2235"
      },
      {
        "astId": 1487,
        "contract": "contracts/Reward.sol:Reward",
        "label": "distributor",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 1491,
        "contract": "contracts/Reward.sol:Reward",
        "label": "pools",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1499,
        "contract": "contracts/Reward.sol:Reward",
        "label": "userInfo",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(LockInfo)1479_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LockInfo)1479_storage)dyn_storage": {
        "base": "t_struct(LockInfo)1479_storage",
        "encoding": "dynamic_array",
        "label": "struct Reward.LockInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)810": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISFTToken)2235": {
        "encoding": "inplace",
        "label": "contract ISFTToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(LockInfo)1479_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Reward.LockInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(LockInfo)1479_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_array(t_struct(LockInfo)1479_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Reward.LockInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockInfo)1479_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockInfo)1479_storage": {
        "encoding": "inplace",
        "label": "struct Reward.LockInfo",
        "members": [
          {
            "astId": 1470,
            "contract": "contracts/Reward.sol:Reward",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1472,
            "contract": "contracts/Reward.sol:Reward",
            "label": "stakeAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1474,
            "contract": "contracts/Reward.sol:Reward",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1476,
            "contract": "contracts/Reward.sol:Reward",
            "label": "totalRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1478,
            "contract": "contracts/Reward.sol:Reward",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}