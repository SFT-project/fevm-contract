{
  "address": "0x63896Cf525DE7B67E5986A31b2E8a8381e9196B5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "applyId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applyTime",
          "type": "uint256"
        }
      ],
      "name": "ApplyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DemandDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "SetApprover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "SetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDemandDepositLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDemandDepositLimit",
          "type": "uint256"
        }
      ],
      "name": "SetDemandDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "SetOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authority",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TakeTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "applyId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "applyId",
          "type": "bytes32"
        }
      ],
      "name": "approveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authority",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "demandDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "demandDepositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "demandTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositedList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_filToken",
          "type": "address"
        },
        {
          "internalType": "contract ISFTToken",
          "name": "_sftToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_demandDepositLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_mutex",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_applyCount",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mutex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "setApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newemandDepositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDemandDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sftToken",
      "outputs": [
        {
          "internalType": "contract ISFTToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb79999f036e353f82339857ca33ec379a0bda855a0a406cf71d3d4e9af71cc90",
  "receipt": {
    "to": null,
    "from": "0x49554923b9361e158Fb267B436f843a4f537D53a",
    "contractAddress": "0x63896Cf525DE7B67E5986A31b2E8a8381e9196B5",
    "transactionIndex": 2,
    "gasUsed": "1658219",
    "logsBloom": "0x
    "blockHash": "0x43e237116b8dee21bcc8c93ef36659ef812ae80cbadf21e13bfce7fe8d8b78b7",
    "transactionHash": "0xb79999f036e353f82339857ca33ec379a0bda855a0a406cf71d3d4e9af71cc90",
    "logs": [],
    "blockNumber": 25349416,
    "cumulativeGasUsed": "1704686",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d5125d68650b7d1d291919804106f8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"applyId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"name\":\"ApplyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DemandDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SetApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDemandDepositLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDemandDepositLimit\",\"type\":\"uint256\"}],\"name\":\"SetDemandDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"applyId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"applyId\",\"type\":\"bytes32\"}],\"name\":\"approveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"demandDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"demandDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"demandTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_filToken\",\"type\":\"address\"},{\"internalType\":\"contract ISFTToken\",\"name\":\"_sftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_demandDepositLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_mutex\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_applyCount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mutex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newemandDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setDemandDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftToken\",\"outputs\":[{\"internalType\":\"contract ISFTToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Deposit.sol\":\"Deposit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/ISFTToken.sol\\\";\\r\\n\\r\\n\\r\\ncontract Deposit is Ownable2StepUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct UserDeposit {\\r\\n        uint depositedAmount;\\r\\n        uint pendingAmount;\\r\\n    }\\r\\n\\r\\n    struct WithdrawApplication {\\r\\n        bytes32 applyId;\\r\\n        address user;\\r\\n        uint amount;\\r\\n        uint nonce;\\r\\n        bool processed; // false:\\u672a\\u5904\\u7406\\uff0ctrue\\uff1a\\u5df2\\u5904\\u7406\\r\\n        uint applyTime;\\r\\n    }\\r\\n\\r\\n \\r\\n    IERC20 public filToken;\\r\\n    ISFTToken public sftToken;\\r\\n    address public oracle;\\r\\n    bool public mutex;\\r\\n    uint public applyCount;\\r\\n    uint public demandDepositLimit; //\\u8d28\\u62bc\\u4e0a\\u9650\\r\\n    uint public demandTotalAmount; //\\u603b\\u8d28\\u62bc\\u6570\\r\\n    address[] public depositedList; //\\u6709deposited\\u72b6\\u6001\\u4ee3\\u5e01\\u7684address\\u5217\\u8868\\r\\n    address[] public pendingList;  // \\u6709pending\\u72b6\\u6001\\u4ee3\\u5e01\\u7684address\\u5217\\u8868\\r\\n\\r\\n    mapping (address => UserDeposit) public userDeposit; // \\u7528\\u6237\\u8d28\\u62bc\\u72b6\\u6001\\r\\n    mapping (address => bool) public authority; // \\u63d0\\u5e01\\u6743\\u9650\\r\\n    mapping (address => bool) public approver; // \\u63d0\\u5e01\\u6279\\u51c6\\u4eba\\r\\n    mapping (address => bytes32[]) userApplications; // user address => applyId\\r\\n    mapping (bytes32 => WithdrawApplication) withdrawApplication;\\r\\n\\r\\n    event DemandDeposit(address indexed user, uint amount);\\r\\n    event SetAuthority(address indexed account, bool authorized);\\r\\n    event SetApprover(address indexed account, bool authorized);\\r\\n    event TakeTokens(address indexed authority, uint amount);\\r\\n    event SetOracle (address oldOracle, address newOracle);\\r\\n    event SetDemandDepositLimit(uint oldDemandDepositLimit, uint newDemandDepositLimit);\\r\\n    event ApplyWithdraw(bytes32 applyId, address indexed user, uint amount, uint applyTime);\\r\\n    event Withdraw(bytes32 applyId, address indexed user, uint amount, uint timestamp);\\r\\n\\r\\n    function initialize(IERC20 _filToken, ISFTToken _sftToken, address _authority, address _approver, address _oracle, uint _demandDepositLimit, bool _mutex, uint _applyCount) external initializer {\\r\\n        require(address(_filToken) != address(0), \\\"fil token address cannot be zero\\\");\\r\\n        require(address(_sftToken) != address(0), \\\"SFT token address cannot be zero\\\");\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n        filToken = _filToken;\\r\\n        sftToken = _sftToken;\\r\\n        mutex = _mutex;\\r\\n        applyCount = _applyCount;\\r\\n        _setAuthority(_authority, true);\\r\\n        _setApprover(_approver, true);\\r\\n        _setOracle(_oracle);\\r\\n        _setDemandDepositLimit(_demandDepositLimit);\\r\\n    }\\r\\n\\r\\n    function setDemandDepositLimit(uint newemandDepositLimit) external onlyOwner {\\r\\n        _setDemandDepositLimit(newemandDepositLimit);\\r\\n    }\\r\\n\\r\\n    function _setDemandDepositLimit(uint _demandDepositLimit) private {\\r\\n        emit SetDemandDepositLimit(demandDepositLimit, _demandDepositLimit);\\r\\n        demandDepositLimit = _demandDepositLimit;\\r\\n    }\\r\\n\\r\\n    function setApprover(address _approver, bool _authorized) external onlyOwner {\\r\\n        _setApprover(_approver, _authorized);\\r\\n    }\\r\\n\\r\\n    function _setApprover(address _approver, bool _authorized) private {\\r\\n        require(_approver != address(0), \\\"empty approver\\\");\\r\\n        approver[_approver] = _authorized;\\r\\n        emit SetApprover(_approver, _authorized);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setAuthority(address _authority, bool _authorized) external onlyOwner {\\r\\n        _setAuthority(_authority, _authorized);\\r\\n    }\\r\\n\\r\\n    function _setAuthority(address _authority, bool _authorized) private {\\r\\n        require(_authority != address(0), \\\"empty authority\\\");\\r\\n        authority[_authority] = _authorized;\\r\\n        emit SetAuthority(_authority, _authorized);\\r\\n    }\\r\\n\\r\\n    function setOracle(address newOracle) external onlyOwner {\\r\\n        _setOracle(newOracle);\\r\\n    }\\r\\n\\r\\n    function _setOracle(address _oracle) private {\\r\\n        require(_oracle != address(0), \\\"empty oracle\\\");\\r\\n        emit SetOracle(oracle, _oracle);\\r\\n        oracle = _oracle;\\r\\n    }\\r\\n    \\r\\n    // \\u8d28\\u62bc\\r\\n    function demandDeposit(uint amount) external {\\r\\n        require(filToken.balanceOf(address(msg.sender)) >= amount, \\\"fil balance not enough\\\");\\r\\n        require(amount + demandTotalAmount <= demandDepositLimit, \\\"exceed deposit limit\\\");\\r\\n        filToken.safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n        UserDeposit storage user = userDeposit[address(msg.sender)];\\r\\n        if (user.depositedAmount == 0) {\\r\\n            depositedList.push(address(msg.sender));\\r\\n        } \\r\\n        user.depositedAmount += amount;\\r\\n        demandTotalAmount += amount;\\r\\n        emit DemandDeposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // \\u53d6\\u8d70\\u8d28\\u62bc\\u7684fil\\uff0c\\u62ff\\u53bb\\u505a\\u8282\\u70b9\\r\\n    function takeTokens() external {\\r\\n        require(authority[msg.sender], \\\"!authority\\\");\\r\\n        require(mutex, \\\"locked!\\\");\\r\\n        mutex = false;\\r\\n        if (depositedList.length == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint remainTokens = 0;\\r\\n        for(uint i = 0; i < depositedList.length; i++) {\\r\\n            UserDeposit storage user = userDeposit[depositedList[i]];\\r\\n            if (user.pendingAmount == 0) {\\r\\n                pendingList.push(depositedList[i]);\\r\\n            }\\r\\n            uint depositedAmount = user.depositedAmount; // save gas\\r\\n            user.pendingAmount += depositedAmount;\\r\\n            user.depositedAmount = 0;\\r\\n            remainTokens += depositedAmount;\\r\\n        }\\r\\n        require(filToken.balanceOf(address(this)) >= remainTokens, \\\"incorrect balance\\\");\\r\\n        delete depositedList;\\r\\n        filToken.safeTransfer(address(msg.sender), remainTokens);\\r\\n        emit TakeTokens(address(msg.sender), remainTokens);\\r\\n    }\\r\\n\\r\\n    // \\u8282\\u70b9\\u5c01\\u88c5\\u5b8c\\u6210\\r\\n    function staked() external {\\r\\n        require(address(msg.sender) == oracle, \\\"only oracle can call\\\");\\r\\n        require(!mutex, \\\"locked!\\\");\\r\\n        mutex = true;\\r\\n        if (pendingList.length == 0) {\\r\\n            return;\\r\\n        }\\r\\n        for (uint i = 0; i < pendingList.length; i++) {\\r\\n            UserDeposit storage user = userDeposit[pendingList[i]];\\r\\n            uint pendingAmount = user.pendingAmount; // save gas\\r\\n            user.pendingAmount = 0;\\r\\n            sftToken.mint(pendingList[i], pendingAmount);\\r\\n        }\\r\\n        delete pendingList;\\r\\n    }\\r\\n\\r\\n    // \\u7533\\u8bf7\\u53d6\\u6b3e\\r\\n    function applyWithdraw(uint amount) external {\\r\\n        require(sftToken.balanceOf(address(msg.sender)) >= amount, \\\"sft token balance not enough\\\");\\r\\n        require(sftToken.transferFrom(address(msg.sender), address(this), amount), \\\"tranfer fialed\\\");\\r\\n        uint nonce = applyCount;\\r\\n        applyCount += 1;\\r\\n        bytes32 applyId = keccak256(abi.encodePacked(address(msg.sender), nonce));\\r\\n        WithdrawApplication storage appliaction =  withdrawApplication[applyId];\\r\\n        appliaction.applyId = applyId;\\r\\n        appliaction.user = address(msg.sender);\\r\\n        appliaction.amount = amount;\\r\\n        appliaction.processed = false;\\r\\n        appliaction.nonce = nonce;\\r\\n        appliaction.applyTime = block.timestamp;\\r\\n        userApplications[address(msg.sender)].push(applyId);\\r\\n        emit ApplyWithdraw(applyId, address(msg.sender), amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // \\u6279\\u51c6\\u63d0\\u6b3e\\r\\n    function approveWithdraw(bytes32 applyId) external {\\r\\n        require(approver[address(msg.sender)], \\\"not approver\\\");\\r\\n        require(!withdrawApplication[applyId].processed, \\\"already processed\\\");\\r\\n        WithdrawApplication storage application = withdrawApplication[applyId];\\r\\n        uint withdrawAmount = application.amount; // save gas\\r\\n        address user = application.user;\\r\\n        require(sftToken.balanceOf(address(this)) >= withdrawAmount, \\\"incorrect sft token balance\\\");\\r\\n        require(filToken.balanceOf(address(msg.sender)) >= withdrawAmount, \\\"fil token balacne not enough\\\");\\r\\n        application.processed = true;\\r\\n        filToken.safeTransferFrom(address(msg.sender), user, withdrawAmount);\\r\\n        sftToken.burn(withdrawAmount);\\r\\n        emit Withdraw(applyId, user, withdrawAmount, block.timestamp);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb052ee4ea9e475848c94fc5f974adf17397df91155f53b26fe09cc071c4bce76\",\"license\":\"MIT\"},\"contracts/interface/ISFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface ISFTToken is IERC20 {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x797e88771e1d7bbb1ca07104e5f8829382d64cf8a7a7c2b0f7b68f6e494a6825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d07806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80637adbf973116100f9578063d1260edd11610097578063d781ff7111610071578063d781ff71146103a8578063e30c3978146103b1578063f2fde38b146103c2578063f86af85f146103d557600080fd5b8063d1260edd14610346578063d5fc44bf14610382578063d76fd2e71461039557600080fd5b80638e18d648116100d35780638e18d648146102f9578063a57207701461030c578063b5f0d35c14610320578063cb9bdcf41461033357600080fd5b80637adbf973146102c25780637dc0d1d0146102d55780638da5cb5b146102e857600080fd5b80633f131d9f116101665780634b095215116101405780634b0952151461027c5780637104dd031461028f578063715018a6146102b257806379ba5097146102ba57600080fd5b80633f131d9f146102295780633fe6cf091461025c57806347b3c4491461027357600080fd5b806303aca792146101ae5780630b76619b146101de5780631aa7ed57146101e85780632191b2b2146101fb578063228130531461020e578063318c00fc14610221575b600080fd5b6101c16101bc366004611a46565b6103e8565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e6610412565b005b6101e66101f6366004611a46565b6105d4565b6101e6610209366004611a46565b6105e8565b6101e661021c366004611a46565b610919565b6101e6610b0c565b61024c610237366004611a74565b60a16020526000908152604090205460ff1681565b60405190151581526020016101d5565b610265609a5481565b6040519081526020016101d5565b610265609b5481565b6101e661028a366004611aa6565b610db5565b61024c61029d366004611a74565b60a06020526000908152604090205460ff1681565b6101e6610ff8565b6101e661100a565b6101e66102d0366004611a74565b611081565b6099546101c1906001600160a01b031681565b6033546001600160a01b03166101c1565b6097546101c1906001600160a01b031681565b60995461024c90600160a01b900460ff1681565b6101e661032e366004611b3d565b611092565b6101c1610341366004611a46565b6110a8565b61036d610354366004611a74565b609f602052600090815260409020805460019091015482565b604080519283526020830191909152016101d5565b6098546101c1906001600160a01b031681565b6101e66103a3366004611b3d565b6110b8565b610265609c5481565b6065546001600160a01b03166101c1565b6101e66103d0366004611a74565b6110ca565b6101e66103e3366004611a46565b61113b565b609e81815481106103f857600080fd5b6000918252602090912001546001600160a01b0316905081565b6099546001600160a01b031633146104685760405162461bcd60e51b81526020600482015260146024820152731bdb9b1e481bdc9858db194818d85b8818d85b1b60621b60448201526064015b60405180910390fd5b609954600160a01b900460ff16156104ac5760405162461bcd60e51b81526020600482015260076024820152666c6f636b65642160c81b604482015260640161045f565b6099805460ff60a01b1916600160a01b179055609e546104c857565b60005b609e548110156105c5576000609f6000609e84815481106104ee576104ee611b76565b60009182526020808320909101546001600160a01b0390811684529083019390935260409091018120600181018054929055609854609e8054929550929316916340c10f19918690811061054457610544611b76565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b50505050505080806105bd90611ba2565b9150506104cb565b506105d2609e6000611a14565b565b6105dc6113c5565b6105e58161141f565b50565b33600090815260a1602052604090205460ff166106365760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b8383937bb32b960a11b604482015260640161045f565b600081815260a3602052604090206004015460ff161561068c5760405162461bcd60e51b8152602060048201526011602482015270185b1c9958591e481c1c9bd8d95cdcd959607a1b604482015260640161045f565b600081815260a36020526040908190206002810154600182015460985493516370a0823160e01b8152306004820152929391926001600160a01b0391821692849216906370a082319060240160206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611bbd565b10156107765760405162461bcd60e51b815260206004820152601b60248201527f696e636f72726563742073667420746f6b656e2062616c616e63650000000000604482015260640161045f565b6097546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190611bbd565b101561083f5760405162461bcd60e51b815260206004820152601c60248201527f66696c20746f6b656e2062616c61636e65206e6f7420656e6f75676800000000604482015260640161045f565b60048301805460ff19166001179055609754610866906001600160a01b0316338385611460565b609854604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b5050604080518781526020810186905242918101919091526001600160a01b03841692507fb66d4229fe9107b32cd9afe73d39ebf3d84f2f8c9dda72fedf450fbd02f7018191506060015b60405180910390a250505050565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190611bbd565b10156109db5760405162461bcd60e51b81526020600482015260166024820152750ccd2d840c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b604482015260640161045f565b609b54609c546109eb9083611bd6565b1115610a305760405162461bcd60e51b8152602060048201526014602482015273195e18d959590819195c1bdcda5d081b1a5b5a5d60621b604482015260640161045f565b609754610a48906001600160a01b0316333084611460565b336000908152609f602052604090208054610aa057609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0180546001600160a01b031916331790555b81816000016000828254610ab49190611bd6565b9250508190555081609c6000828254610acd9190611bd6565b909155505060405182815233907f65d1d1b522c4ff7fbc4d9aed40850a732983d8be21ea116346136e556e7d9e59906020015b60405180910390a25050565b33600090815260a0602052604090205460ff16610b585760405162461bcd60e51b815260206004820152600a60248201526921617574686f7269747960b01b604482015260640161045f565b609954600160a01b900460ff16610b9b5760405162461bcd60e51b81526020600482015260076024820152666c6f636b65642160c81b604482015260640161045f565b6099805460ff60a01b19169055609d54610bb157565b6000805b609d54811015610c9c576000609f6000609d8481548110610bd857610bd8611b76565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001810154909150610c5957609e609d8381548110610c1d57610c1d611b76565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b8054600182018054829190600090610c72908490611bd6565b909155505060008255610c858185611bd6565b935050508080610c9490611ba2565b915050610bb5565b506097546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190611bbd565b1015610d5a5760405162461bcd60e51b8152602060048201526011602482015270696e636f72726563742062616c616e636560781b604482015260640161045f565b610d66609d6000611a14565b609754610d7d906001600160a01b031633836114d1565b60405181815233907fb0c5ff47f10a2410ce7eb47f13014ccee13e818cc286358e415de3bad6f489d29060200160405180910390a250565b600054610100900460ff1615808015610dd55750600054600160ff909116105b80610def5750303b158015610def575060005460ff166001145b610e525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161045f565b6000805460ff191660011790558015610e75576000805461ff0019166101001790555b6001600160a01b038916610ecb5760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161045f565b6001600160a01b038816610f215760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161045f565b610f29611506565b610f3161152d565b609780546001600160a01b03808c166001600160a01b03199283161790925560988054928b169290911691909117905560998054841515600160a01b0260ff60a01b19909116179055609a829055610f8a87600161155d565b610f958660016115fd565b610f9e8561169c565b610fa78461141f565b8015610fed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6110006113c5565b6105d2600061174a565b60655433906001600160a01b031681146110785760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161045f565b6105e58161174a565b6110896113c5565b6105e58161169c565b61109a6113c5565b6110a4828261155d565b5050565b609d81815481106103f857600080fd5b6110c06113c5565b6110a482826115fd565b6110d26113c5565b606580546001600160a01b0383166001600160a01b031990911681179091556111036033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6098546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190611bbd565b10156112045760405162461bcd60e51b815260206004820152601c60248201527f73667420746f6b656e2062616c616e6365206e6f7420656e6f75676800000000604482015260640161045f565b6098546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190611bee565b6112cb5760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b99995c88199a585b195960921b604482015260640161045f565b609a80549060019060006112df8385611bd6565b90915550506040516bffffffffffffffffffffffff193360601b1660208201526034810182905260009060540160408051601f198184030181528282528051602091820120600081815260a38352838120828155600180820180546001600160a01b03191633908117909155600283018b905560048301805460ff19169055600383018a9055426005840181905581855260a287528785208054938401815585529386902090910184905583875293860189905293850152935090917fe7b518091de9414dd6a88899fa7032485092f616f1c94271c75e0172a75e20549060600161090b565b6033546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045f565b609b5460408051918252602082018390527f08851b5ecdc64f4d483ecaa7eba451f797d5ef96ce824ba9241603027769f2a6910160405180910390a1609b55565b6040516001600160a01b03808516602483015283166044820152606481018290526114cb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611763565b50505050565b6040516001600160a01b03831660248201526044810182905261150190849063a9059cbb60e01b90606401611494565b505050565b600054610100900460ff166105d25760405162461bcd60e51b815260040161045f90611c0b565b600054610100900460ff166115545760405162461bcd60e51b815260040161045f90611c0b565b6105d23361174a565b6001600160a01b0382166115a55760405162461bcd60e51b815260206004820152600f60248201526e656d70747920617574686f7269747960881b604482015260640161045f565b6001600160a01b038216600081815260a06020908152604091829020805460ff191685151590811790915591519182527f9019659af698fad527191eef17d6d00706d88aa9fabff25a08edea756c3619939101610b00565b6001600160a01b0382166116445760405162461bcd60e51b815260206004820152600e60248201526d32b6b83a3c9030b8383937bb32b960911b604482015260640161045f565b6001600160a01b038216600081815260a16020908152604091829020805460ff191685151590811790915591519182527f323888aef1ea04a125806387c1f89db9bd9c5c6f40a1f2303e57fc3b9e8d8cf09101610b00565b6001600160a01b0381166116e15760405162461bcd60e51b815260206004820152600c60248201526b656d707479206f7261636c6560a01b604482015260640161045f565b609954604080516001600160a01b03928316815291831660208301527fb7261e9c33aa7c56209c3bf60b424a8f9551ce28876c0ab3d0c487695e943487910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b606580546001600160a01b03191690556105e581611835565b60006117b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118879092919063ffffffff16565b80519091501561150157808060200190518101906117d69190611bee565b6115015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060611896848460008561189e565b949350505050565b6060824710156118ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045f565b600080866001600160a01b0316858760405161191b9190611c82565b60006040518083038185875af1925050503d8060008114611958576040519150601f19603f3d011682016040523d82523d6000602084013e61195d565b606091505b509150915061196e87838387611979565b979650505050505050565b606083156119e55782516119de576001600160a01b0385163b6119de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045f565b5081611896565b61189683838151156119fa5781518083602001fd5b8060405162461bcd60e51b815260040161045f9190611c9e565b50805460008255906000526020600020908101906105e591905b80821115611a425760008155600101611a2e565b5090565b600060208284031215611a5857600080fd5b5035919050565b6001600160a01b03811681146105e557600080fd5b600060208284031215611a8657600080fd5b8135611a9181611a5f565b9392505050565b80151581146105e557600080fd5b600080600080600080600080610100898b031215611ac357600080fd5b8835611ace81611a5f565b97506020890135611ade81611a5f565b96506040890135611aee81611a5f565b95506060890135611afe81611a5f565b94506080890135611b0e81611a5f565b935060a0890135925060c0890135611b2581611a98565b8092505060e089013590509295985092959890939650565b60008060408385031215611b5057600080fd5b8235611b5b81611a5f565b91506020830135611b6b81611a98565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bb657611bb6611b8c565b5060010190565b600060208284031215611bcf57600080fd5b5051919050565b60008219821115611be957611be9611b8c565b500190565b600060208284031215611c0057600080fd5b8151611a9181611a98565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611c71578181015183820152602001611c59565b838111156114cb5750506000910152565b60008251611c94818460208701611c56565b9190910192915050565b6020815260008251806020840152611cbd816040850160208701611c56565b601f01601f1916919091016040019291505056fea26469706673582212209f4c28afe84222fe020832d7c282f822f023599f5ed623cdc7ba7dad598144e964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637adbf973116100f9578063d1260edd11610097578063d781ff7111610071578063d781ff71146103a8578063e30c3978146103b1578063f2fde38b146103c2578063f86af85f146103d557600080fd5b8063d1260edd14610346578063d5fc44bf14610382578063d76fd2e71461039557600080fd5b80638e18d648116100d35780638e18d648146102f9578063a57207701461030c578063b5f0d35c14610320578063cb9bdcf41461033357600080fd5b80637adbf973146102c25780637dc0d1d0146102d55780638da5cb5b146102e857600080fd5b80633f131d9f116101665780634b095215116101405780634b0952151461027c5780637104dd031461028f578063715018a6146102b257806379ba5097146102ba57600080fd5b80633f131d9f146102295780633fe6cf091461025c57806347b3c4491461027357600080fd5b806303aca792146101ae5780630b76619b146101de5780631aa7ed57146101e85780632191b2b2146101fb578063228130531461020e578063318c00fc14610221575b600080fd5b6101c16101bc366004611a46565b6103e8565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e6610412565b005b6101e66101f6366004611a46565b6105d4565b6101e6610209366004611a46565b6105e8565b6101e661021c366004611a46565b610919565b6101e6610b0c565b61024c610237366004611a74565b60a16020526000908152604090205460ff1681565b60405190151581526020016101d5565b610265609a5481565b6040519081526020016101d5565b610265609b5481565b6101e661028a366004611aa6565b610db5565b61024c61029d366004611a74565b60a06020526000908152604090205460ff1681565b6101e6610ff8565b6101e661100a565b6101e66102d0366004611a74565b611081565b6099546101c1906001600160a01b031681565b6033546001600160a01b03166101c1565b6097546101c1906001600160a01b031681565b60995461024c90600160a01b900460ff1681565b6101e661032e366004611b3d565b611092565b6101c1610341366004611a46565b6110a8565b61036d610354366004611a74565b609f602052600090815260409020805460019091015482565b604080519283526020830191909152016101d5565b6098546101c1906001600160a01b031681565b6101e66103a3366004611b3d565b6110b8565b610265609c5481565b6065546001600160a01b03166101c1565b6101e66103d0366004611a74565b6110ca565b6101e66103e3366004611a46565b61113b565b609e81815481106103f857600080fd5b6000918252602090912001546001600160a01b0316905081565b6099546001600160a01b031633146104685760405162461bcd60e51b81526020600482015260146024820152731bdb9b1e481bdc9858db194818d85b8818d85b1b60621b60448201526064015b60405180910390fd5b609954600160a01b900460ff16156104ac5760405162461bcd60e51b81526020600482015260076024820152666c6f636b65642160c81b604482015260640161045f565b6099805460ff60a01b1916600160a01b179055609e546104c857565b60005b609e548110156105c5576000609f6000609e84815481106104ee576104ee611b76565b60009182526020808320909101546001600160a01b0390811684529083019390935260409091018120600181018054929055609854609e8054929550929316916340c10f19918690811061054457610544611b76565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b50505050505080806105bd90611ba2565b9150506104cb565b506105d2609e6000611a14565b565b6105dc6113c5565b6105e58161141f565b50565b33600090815260a1602052604090205460ff166106365760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b8383937bb32b960a11b604482015260640161045f565b600081815260a3602052604090206004015460ff161561068c5760405162461bcd60e51b8152602060048201526011602482015270185b1c9958591e481c1c9bd8d95cdcd959607a1b604482015260640161045f565b600081815260a36020526040908190206002810154600182015460985493516370a0823160e01b8152306004820152929391926001600160a01b0391821692849216906370a082319060240160206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611bbd565b10156107765760405162461bcd60e51b815260206004820152601b60248201527f696e636f72726563742073667420746f6b656e2062616c616e63650000000000604482015260640161045f565b6097546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190611bbd565b101561083f5760405162461bcd60e51b815260206004820152601c60248201527f66696c20746f6b656e2062616c61636e65206e6f7420656e6f75676800000000604482015260640161045f565b60048301805460ff19166001179055609754610866906001600160a01b0316338385611460565b609854604051630852cd8d60e31b8152600481018490526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b5050604080518781526020810186905242918101919091526001600160a01b03841692507fb66d4229fe9107b32cd9afe73d39ebf3d84f2f8c9dda72fedf450fbd02f7018191506060015b60405180910390a250505050565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190611bbd565b10156109db5760405162461bcd60e51b81526020600482015260166024820152750ccd2d840c4c2d8c2dcc6ca40dcdee840cadcdeeaced60531b604482015260640161045f565b609b54609c546109eb9083611bd6565b1115610a305760405162461bcd60e51b8152602060048201526014602482015273195e18d959590819195c1bdcda5d081b1a5b5a5d60621b604482015260640161045f565b609754610a48906001600160a01b0316333084611460565b336000908152609f602052604090208054610aa057609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b0180546001600160a01b031916331790555b81816000016000828254610ab49190611bd6565b9250508190555081609c6000828254610acd9190611bd6565b909155505060405182815233907f65d1d1b522c4ff7fbc4d9aed40850a732983d8be21ea116346136e556e7d9e59906020015b60405180910390a25050565b33600090815260a0602052604090205460ff16610b585760405162461bcd60e51b815260206004820152600a60248201526921617574686f7269747960b01b604482015260640161045f565b609954600160a01b900460ff16610b9b5760405162461bcd60e51b81526020600482015260076024820152666c6f636b65642160c81b604482015260640161045f565b6099805460ff60a01b19169055609d54610bb157565b6000805b609d54811015610c9c576000609f6000609d8481548110610bd857610bd8611b76565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001810154909150610c5957609e609d8381548110610c1d57610c1d611b76565b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b8054600182018054829190600090610c72908490611bd6565b909155505060008255610c858185611bd6565b935050508080610c9490611ba2565b915050610bb5565b506097546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190611bbd565b1015610d5a5760405162461bcd60e51b8152602060048201526011602482015270696e636f72726563742062616c616e636560781b604482015260640161045f565b610d66609d6000611a14565b609754610d7d906001600160a01b031633836114d1565b60405181815233907fb0c5ff47f10a2410ce7eb47f13014ccee13e818cc286358e415de3bad6f489d29060200160405180910390a250565b600054610100900460ff1615808015610dd55750600054600160ff909116105b80610def5750303b158015610def575060005460ff166001145b610e525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161045f565b6000805460ff191660011790558015610e75576000805461ff0019166101001790555b6001600160a01b038916610ecb5760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161045f565b6001600160a01b038816610f215760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161045f565b610f29611506565b610f3161152d565b609780546001600160a01b03808c166001600160a01b03199283161790925560988054928b169290911691909117905560998054841515600160a01b0260ff60a01b19909116179055609a829055610f8a87600161155d565b610f958660016115fd565b610f9e8561169c565b610fa78461141f565b8015610fed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6110006113c5565b6105d2600061174a565b60655433906001600160a01b031681146110785760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161045f565b6105e58161174a565b6110896113c5565b6105e58161169c565b61109a6113c5565b6110a4828261155d565b5050565b609d81815481106103f857600080fd5b6110c06113c5565b6110a482826115fd565b6110d26113c5565b606580546001600160a01b0383166001600160a01b031990911681179091556111036033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6098546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190611bbd565b10156112045760405162461bcd60e51b815260206004820152601c60248201527f73667420746f6b656e2062616c616e6365206e6f7420656e6f75676800000000604482015260640161045f565b6098546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190611bee565b6112cb5760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b99995c88199a585b195960921b604482015260640161045f565b609a80549060019060006112df8385611bd6565b90915550506040516bffffffffffffffffffffffff193360601b1660208201526034810182905260009060540160408051601f198184030181528282528051602091820120600081815260a38352838120828155600180820180546001600160a01b03191633908117909155600283018b905560048301805460ff19169055600383018a9055426005840181905581855260a287528785208054938401815585529386902090910184905583875293860189905293850152935090917fe7b518091de9414dd6a88899fa7032485092f616f1c94271c75e0172a75e20549060600161090b565b6033546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045f565b609b5460408051918252602082018390527f08851b5ecdc64f4d483ecaa7eba451f797d5ef96ce824ba9241603027769f2a6910160405180910390a1609b55565b6040516001600160a01b03808516602483015283166044820152606481018290526114cb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611763565b50505050565b6040516001600160a01b03831660248201526044810182905261150190849063a9059cbb60e01b90606401611494565b505050565b600054610100900460ff166105d25760405162461bcd60e51b815260040161045f90611c0b565b600054610100900460ff166115545760405162461bcd60e51b815260040161045f90611c0b565b6105d23361174a565b6001600160a01b0382166115a55760405162461bcd60e51b815260206004820152600f60248201526e656d70747920617574686f7269747960881b604482015260640161045f565b6001600160a01b038216600081815260a06020908152604091829020805460ff191685151590811790915591519182527f9019659af698fad527191eef17d6d00706d88aa9fabff25a08edea756c3619939101610b00565b6001600160a01b0382166116445760405162461bcd60e51b815260206004820152600e60248201526d32b6b83a3c9030b8383937bb32b960911b604482015260640161045f565b6001600160a01b038216600081815260a16020908152604091829020805460ff191685151590811790915591519182527f323888aef1ea04a125806387c1f89db9bd9c5c6f40a1f2303e57fc3b9e8d8cf09101610b00565b6001600160a01b0381166116e15760405162461bcd60e51b815260206004820152600c60248201526b656d707479206f7261636c6560a01b604482015260640161045f565b609954604080516001600160a01b03928316815291831660208301527fb7261e9c33aa7c56209c3bf60b424a8f9551ce28876c0ab3d0c487695e943487910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b606580546001600160a01b03191690556105e581611835565b60006117b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118879092919063ffffffff16565b80519091501561150157808060200190518101906117d69190611bee565b6115015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6060611896848460008561189e565b949350505050565b6060824710156118ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045f565b600080866001600160a01b0316858760405161191b9190611c82565b60006040518083038185875af1925050503d8060008114611958576040519150601f19603f3d011682016040523d82523d6000602084013e61195d565b606091505b509150915061196e87838387611979565b979650505050505050565b606083156119e55782516119de576001600160a01b0385163b6119de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045f565b5081611896565b61189683838151156119fa5781518083602001fd5b8060405162461bcd60e51b815260040161045f9190611c9e565b50805460008255906000526020600020908101906105e591905b80821115611a425760008155600101611a2e565b5090565b600060208284031215611a5857600080fd5b5035919050565b6001600160a01b03811681146105e557600080fd5b600060208284031215611a8657600080fd5b8135611a9181611a5f565b9392505050565b80151581146105e557600080fd5b600080600080600080600080610100898b031215611ac357600080fd5b8835611ace81611a5f565b97506020890135611ade81611a5f565b96506040890135611aee81611a5f565b95506060890135611afe81611a5f565b94506080890135611b0e81611a5f565b935060a0890135925060c0890135611b2581611a98565b8092505060e089013590509295985092959890939650565b60008060408385031215611b5057600080fd5b8235611b5b81611a5f565b91506020830135611b6b81611a98565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bb657611bb6611b8c565b5060010190565b600060208284031215611bcf57600080fd5b5051919050565b60008219821115611be957611be9611b8c565b500190565b600060208284031215611c0057600080fd5b8151611a9181611a98565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611c71578181015183820152602001611c59565b838111156114cb5750506000910152565b60008251611c94818460208701611c56565b9190910192915050565b6020815260008251806020840152611cbd816040850160208701611c56565b601f01601f1916919091016040019291505056fea26469706673582212209f4c28afe84222fe020832d7c282f822f023599f5ed623cdc7ba7dad598144e964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 731,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1489,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "filToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)810"
      },
      {
        "astId": 1492,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "sftToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ISFTToken)2936"
      },
      {
        "astId": 1494,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "oracle",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 1496,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "mutex",
        "offset": 20,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 1498,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "applyCount",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 1500,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "demandDepositLimit",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 1502,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "demandTotalAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 1505,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "depositedList",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1508,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "pendingList",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1513,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "userDeposit",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_struct(UserDeposit)1473_storage)"
      },
      {
        "astId": 1517,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "authority",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1521,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "approver",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1526,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "userApplications",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1531,
        "contract": "contracts/Deposit.sol:Deposit",
        "label": "withdrawApplication",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_bytes32,t_struct(WithdrawApplication)1486_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)810": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISFTToken)2936": {
        "encoding": "inplace",
        "label": "contract ISFTToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserDeposit)1473_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Deposit.UserDeposit)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDeposit)1473_storage"
      },
      "t_mapping(t_bytes32,t_struct(WithdrawApplication)1486_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Deposit.WithdrawApplication)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawApplication)1486_storage"
      },
      "t_struct(UserDeposit)1473_storage": {
        "encoding": "inplace",
        "label": "struct Deposit.UserDeposit",
        "members": [
          {
            "astId": 1470,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "depositedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1472,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "pendingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawApplication)1486_storage": {
        "encoding": "inplace",
        "label": "struct Deposit.WithdrawApplication",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "applyId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1477,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1479,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1481,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1483,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "processed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1485,
            "contract": "contracts/Deposit.sol:Deposit",
            "label": "applyTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}